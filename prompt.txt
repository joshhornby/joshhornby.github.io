```markdown
**Prompt**

> **Role & goal**
> You are a **senior front-end engineer** specialising in modern React (v18+) and TypeScript. Build a *single-page* React application that lets a product-analytics Principal experiment with funnel metrics and instantly see how changes ripple through conversion rates.
>
> **Functional requirements**
> 1. **Metric list editor**
>    * Let the user enter any number of funnel steps in order (e.g. “PDP Viewed → Basket Created → Order Completed”).
>    * For every step collect an **absolute count** (integer ≥ 0).
> 2. **Automatic calculations**
>    * For every consecutive pair compute the step-to-step conversion rate.
>      `rate[i] = count[i+1] / count[i]` (show as % with one decimal).
>    * Compute the overall conversion from the first to the last step.
> 3. **State & persistence**
>    * Keep all state in **localStorage** so a full page refresh restores the last entered funnel.
> 4. **User interface**
>    * Inline, spreadsheet-like editing (no modal dialogs).
>    * A read-only column that updates conversion rates in real time.
>    * “Add step”, “Remove step”, and “Reset funnel” actions.
> 5. **Tech constraints**
>    * React functional components + hooks.
>    * TypeScript for type safety.
>    * No external state-management library.
>    * Only lightweight UI libs (e.g. MUI or Chakra)—or none.
> 6. **Deliverables** – return **exactly three** top-level items:
>    1. `/src/App.tsx` — full component code with explanatory comments.
>    2. `/src/useFunnel.ts` — a custom hook that encapsulates localStorage logic and percentage maths.
>    3. `README.md` — one-page setup & run instructions using `vite` or `create-react-app`.
>
> **Example seed data (for testing)**
> | Step                | Count | → Rate |
> |---------------------|-------|-------|
> | PDP Viewed          | 100   | –     |
> | Basket Created      | 10    | 10 %  |
> | Order Completed     | 5     | 50 %  |
> | **Overall**         | –     | **5 %** |
>
> **Quality bar**
> * Clean, idiomatic TSX (no `any`).
> * Mobile-friendly layout.
> * Include brief inline JSDoc for every public function.
> * All percentage calculations covered by simple Jest tests.
>
> **When you respond**: include *only* the three files exactly as requested; no extra narration.
```
